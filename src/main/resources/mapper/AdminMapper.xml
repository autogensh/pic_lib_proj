<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.piclib.web.dao.AdminMapper">
    <resultMap id="recordCount" type="java.lang.Integer">
        <result column="recordCount" jdbcType="INTEGER"/>
    </resultMap>
    <resultMap id="categoryName" type="java.lang.String">
        <result column="name" jdbcType="VARCHAR"/>
    </resultMap>
    <resultMap id="materialListResultMap" type="java.util.HashMap">
    </resultMap>
    <resultMap id="MaterialInfoWithoutImgResultMap" type="com.piclib.web.model.MaterialInfo">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="catId" jdbcType="INTEGER" property="catId" />
        <result column="materialName" jdbcType="VARCHAR" property="materialName" />
        <result column="isDeleted" jdbcType="BIT" property="isDeleted" />
        <result column="license" jdbcType="INTEGER" property="license" />
        <result column="desc" jdbcType="VARCHAR" property="desc" />
        <result column="views" jdbcType="INTEGER" property="views" />
        <result column="downs" jdbcType="INTEGER" property="downs" />
        <result column="createAt" jdbcType="TIMESTAMP" property="createAt" />
        <result column="updateAt" jdbcType="TIMESTAMP" property="updateAt" />
        <result column="createBy" jdbcType="INTEGER" property="createBy" />
        <result column="tags" jdbcType="VARCHAR" property="tags" />
        <result column="owner" jdbcType="VARCHAR" property="owner" />
        <result column="categoryName" jdbcType="VARCHAR" property="categoryName" />
        <result column="licenseTitle" jdbcType="VARCHAR" property="licenseTitle" />
        <result column="coverImg" jdbcType="VARCHAR" property="coverImg" />
        <result column="measure" jdbcType="VARCHAR" property="measure" />
        <result column="colorSpace" jdbcType="VARCHAR" property="colorSpace" />
        <result column="fileSize" jdbcType="VARCHAR" property="fileSize" />
        <result column="fileFormat" jdbcType="VARCHAR" property="fileFormat" />
    </resultMap>
    <select id="selectMaterialList" parameterType="java.util.HashMap" resultMap="materialListResultMap, recordCount">
        select SQL_CALC_FOUND_ROWS
        t.tags as tags,
        u.username as owner,
        c.name as categoryName,
        l.title as licenseTitle,
        m.id as id,
        m.catId as catId,
        m.license as licenseId,
        m.name as materialName,
        m.`desc` as `desc`,
        f.fileUrl as coverImg,
        f.measure as measure,
        f.colorSpace as colorSpace,
        f.fileSize as fileSize,
        f.fileFormat as fileFormat,
        m.views as views,
        m.downs as downs,
        m.createAt as createAt,
        m.updateAt as updateAt,
        m.createBy as createBy,
        m.isDeleted as isDeleted
        from t_material m
        LEFT JOIN t_material_category c
        on m.catId = c.id
        LEFT JOIN t_user u
        on m.createBy = u.id
        LEFT JOIN t_license l
        on m.license = l.id
        LEFT JOIN (select group_concat(tag order by id) as tags, matId from t_material_tag where isDeleted=false group by matId) t
        on m.id = t.matId
        LEFT JOIN (select min(id), matId, fileUrl, measure, colorSpace, fileSize, fileFormat from t_material_file where
        isDeleted=false group by matId) f
        on m.id=f.matId
        where m.isDeleted = false
        <if test="catId != null">
            and m.catId = ${catId}
        </if>
        <if test="orderBy != null">
            order by ${orderBy}
        </if>
        <if test="page != null and pageSize != null">
            limit ${(page-1)*pageSize}, #{pageSize}
        </if>
        ;SELECT found_rows() as recordCount
    </select>
    <select id="selectCategoryList" parameterType="java.util.HashMap" resultMap="materialListResultMap, recordCount">
        select SQL_CALC_FOUND_ROWS
        c.id as id,
        u.username as username,
        count(m.id) as materialCount,
        c.name as name,
        c.isDeleted as isDeleted,
        c.updateAt as updateAt,
        c.parent as parent
        from t_material_category c
        left join t_user u
        on c.createBy=u.id
        left join t_material m
        on c.id=m.catId
        where c.isDeleted=0
        group by c.id
        <if test="orderBy != null">
            order by ${orderBy}
        </if>
        ;SELECT found_rows() as recordCount
    </select>
    <select id="selectMaterialInfoWithoutImg" parameterType="java.lang.Integer" resultMap="MaterialInfoWithoutImgResultMap">
        select
        t.tags as tags,
        u.username as owner,
        c.name as categoryName,
        l.title as licenseTitle,
        m.id as id,
        m.catId as catId,
        m.license as licenseId,
        m.name as materialName,
        m.`desc` as `desc`,
        f.fileUrl as coverImg,
        f.measure as measure,
        f.colorSpace as colorSpace,
        f.fileSize as fileSize,
        f.fileFormat as fileFormat,
        m.views as views,
        m.downs as downs,
        m.createAt as createAt,
        m.updateAt as updateAt,
        m.createBy as createBy,
        m.isDeleted as isDeleted
        from t_material m
        LEFT JOIN t_material_category c
        on m.catId = c.id
        LEFT JOIN t_user u
        on m.createBy = u.id
        LEFT JOIN t_license l
        on m.license = l.id
        LEFT JOIN (select group_concat(tag order by id) as tags, matId from t_material_tag where isDeleted=false group by matId) t
        on m.id = t.matId
        LEFT JOIN (select min(id), matId, fileUrl, measure, colorSpace, fileSize, fileFormat from t_material_file where
        isDeleted=false group by matId) f
        on m.id=f.matId
        where m.id = #{matId}
        ; update t_material set views=views+1 where id = #{matId}
    </select>
    <select id="selectCategoryNameById" parameterType="java.lang.Integer" resultMap="categoryName">
        select name from t_material_category where id = #{id}
    </select>
    <update id="deleteMaterialTags" parameterType="java.lang.Integer">
        update t_material_tag
        set isDeleted = true
        where matId = #{matId}
    </update>
    <update id="deleteMaterialFiles" parameterType="java.lang.Integer">
        update t_material_file
        set isDeleted= true
        where matId = #{matId}
    </update>
    <insert id="insertMaterialFileList" parameterType="java.util.List">
        replace into t_material_file(matId, fileUrl, fileFormat, fileSize, `desc`, measure, colorSpace, isDeleted)
        values
        <foreach collection="list" item="item" index="index" separator=", " close=";">
            (#{item.matId}, #{item.fileUrl}, #{item.fileFormat}, #{item.fileSize}, #{item.desc}, #{item.measure},
            #{item.colorSpace}, #{item.isDeleted})
        </foreach>
    </insert>
    <insert id="insertMaterialTagList" parameterType="java.util.List">
        replace into t_material_tag(matId, tag, isDeleted)
        values
        <foreach collection="list" item="item" index="index" separator=", " close=";">
            (#{item.matId}, #{item.tag}, #{item.isDeleted})
        </foreach>
    </insert>
    <update id="moveCategoryBefore">
UPDATE t_material_category
SET
  `order` = ( SELECT * FROM ( SELECT `order` - 0.1 FROM t_material_category WHERE id = #{dropId} ) tmp ),
  `parent` = ( SELECT * FROM ( SELECT `parent` FROM t_material_category WHERE id = #{dropId} ) tmp )
WHERE id = #{dragId};
call reduceOrder();
    </update>
    <update id="moveCategoryAfter">
UPDATE t_material_category
SET
  `order` = ( SELECT * FROM ( SELECT `order` + 0.1 FROM t_material_category WHERE id = #{dropId} ) tmp ),
  `parent` = ( SELECT * FROM ( SELECT `parent` FROM t_material_category WHERE id = #{dropId} ) tmp )
WHERE id = #{dragId};
call reduceOrder();
    </update>
    <update id="moveCategoryInner">
UPDATE t_material_category
SET
  `order` = ( SELECT (CASE WHEN o IS NULL THEN 0 ELSE o END) FROM ( select (max(`order`) + 0.1) as o from t_material_category where parent=#{dropId} ) tmp ),
  `parent` = #{dropId}
WHERE id = #{dragId};
call reduceOrder();
    </update>
</mapper>
